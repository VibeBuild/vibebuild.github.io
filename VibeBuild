
#!/bin/bash

# ========== Configurações iniciais ==========
BIN_DIR="bin"
LOG_FILE=".vibeBuild.log"
mkdir -p "$BIN_DIR"

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Reset

# ========== Opções ==========
INFO=false
QUIET=false
RUN=false
USE_CLANG=false
DEST_SET=false
FORCE_CLEAN=""
ASSUME_NO_ALL=false

# Se nenhum parâmetro for passado, mostra o help
if [[ $# -eq 0 ]]; then
    set -- --help
fi

# Processa flags
while [[ "$1" =~ ^- ]]; do
    case "$1" in
        --info|-i) INFO=true ;;
        --quiet|-q) QUIET=true ;;
        --run|-r) RUN=true ;;
        --clang) USE_CLANG=true ;;
        --dest|-d)
            DEST_SET=true
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                BIN_DIR="$2"
                shift
            else
                BIN_DIR="."
            fi
            ;;
        -y) FORCE_CLEAN="yes" ;;
        -n) FORCE_CLEAN="no" ;;
        --help|-h)
            echo -e "${BLUE}"
            cat << "EOF"
┌─────────────────────────────────────────────────┐
│      O       Idealized By:       Programmed By  │
│     _|_   Renato Lóis M. Silva     ChatGPT4o    │
│    /   \                                        │
│    () ()                                        │
│   ,|_ _|,                                       │
│ _/_______\_ ....          VibeBuild             │
│ \  < / >  / |--|)                               │
│  \_______/  |__|  One script to build them all  │
│                                                 │
│           https://vibebuild.github.io/          │
└─────────────────────────────────────────────────┘
EOF
            echo -e "${NC}"
            echo -e "${BLUE}Usage:${NC} ./vibeBuild [options] [files]"
            echo "Options:"
            echo "  --info,  -i   Show compiler warnings and errors"
            echo "  --quiet, -q   Minimal output"
            echo "  --run,   -r   Compile (if needed) and run the code"
            echo "  --clang       Use clang/clang++ instead of gcc/g++"
            echo "  --dest,  -d   Set output directory (default: bin)"
            echo "  -y            Always clean bin/ before building (no prompt)"
            echo "  -n            Never clean bin/ (no prompt)"
            echo "  --help,  -h   Show this help"
            exit 0
            ;;
        *) break ;;
    esac
    shift
done

# Cria o diretório de destino se não existir
mkdir -p "$BIN_DIR"

# ========== Pergunta se deve limpar ==========
if [[ $# -gt 0 && $RUN == false && $BIN_DIR == "bin" ]]; then
    if [[ "$FORCE_CLEAN" == "yes" ]]; then
        rm -rf "bin"/*
        echo "Cleaned 'bin/' (forced)"
    elif [[ "$FORCE_CLEAN" == "no" ]]; then
        :
    else
        read -p "Do you want to clean 'bin/' before building? (y/N) " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            rm -rf "bin"/*
            echo "Cleaned 'bin/'"
        fi
    fi
fi

# ========== Inicializa contadores ==========
compiled=0
warnings=0
errors=0
unsupported=0
notfound=0

warning_files=()
error_files=()
unsupported_files=()
notfound_files=()

declare -A used_names

# ========== Inicia log ==========
{
echo
echo "========== Build Started =========="
echo "Date: $(date)"
echo "User: $USER"
echo "System: $(uname -a)"
echo "Directory: $(pwd)"
echo "Output Directory: $BIN_DIR"
} >> "$LOG_FILE"

# ========== Detecta compiladores ==========
C_COMPILER=$(command -v gcc)
CXX_COMPILER=$(command -v g++)
if $USE_CLANG; then
    C_COMPILER=$(command -v clang)
    CXX_COMPILER=$(command -v clang++)
fi
PYTHON_INTERP=$(command -v python3)
NODE_INTERP=$(command -v node)
RUSTC=$(command -v rustc)
GO=$(command -v go)
JAVAC=$(command -v javac)
JAVA=$(command -v java)

# ========== Começa compilação ou execução ==========
$QUIET || echo -e "${BLUE}============== Process Started ==============${NC}"

for file in "$@"; do
    if [[ ! -f "$file" ]]; then
        $QUIET || echo -e "${RED}[NOT FOUND] File not found: $file${NC}"
        echo "[NOT FOUND] File not found: $file" >> "$LOG_FILE"
        notfound=$((notfound + 1))
        notfound_files+=("$file")
        continue
    fi

    filename=$(basename -- "$file")
    name="${filename%.*}"
    ext="${filename##*.}"
    output_name="$name"

    # ========== Gerenciamento de nomes ==========
    if [[ "$RUN" == false ]]; then
        if [[ -n "${used_names[$output_name]}" ]]; then
            $QUIET || echo -e "${YELLOW}Name '$BIN_DIR/$output_name' is already in use for '${used_names[$output_name]}'${NC}"
            echo "[CONFLICT] $BIN_DIR/$output_name already used by ${used_names[$output_name]}" >> "$LOG_FILE"

            if $ASSUME_NO_ALL; then
                output_name="${name}_${ext}"
                $QUIET || echo "-> Automatically renaming '$filename' to $BIN_DIR/$output_name"
                echo "[RESOLVE] Auto rename to $output_name (previous A choice)" >> "$LOG_FILE"
            else
                while true; do
                    echo -n "Do you want to enter a custom name for '$filename'? (y/N/a) "
                    read -n 1 -r choice
                    echo
                    if [[ "$choice" =~ ^[Yy]$ ]]; then
                        while true; do
                            read -p "Enter new name: " newname
                            if [[ -z "$newname" ]]; then
                                echo "Name cannot be empty."
                                continue
                            fi
                            if [[ -n "${used_names[$newname]}" ]]; then
                                echo "Name '$BIN_DIR/$newname' already used."
                                continue
                            fi
                            output_name="$newname"
                            echo "[RESOLVE] Manual rename to $output_name" >> "$LOG_FILE"
                            break
                        done
                        break
                    elif [[ "$choice" =~ ^[Nn]$ || -z "$choice" ]]; then
                        output_name="${name}_${ext}"
                        echo "[RESOLVE] Auto rename to $output_name" >> "$LOG_FILE"
                        break
                    elif [[ "$choice" =~ ^[Aa]$ ]]; then
                        output_name="${name}_${ext}"
                        ASSUME_NO_ALL=true
                        echo "-> Automatically applying 'name_ext' for next conflicts."
                        echo "[RESOLVE] Auto rename to $output_name (A selected)" >> "$LOG_FILE"
                        break
                    else
                        echo "Please answer y, n or a."
                    fi
                done
            fi
        fi
        used_names["$output_name"]="$filename"
    fi

    # ========== RUN ==========
    if [[ "$RUN" == true ]]; then
        tmpfile="/tmp/vibe_tmp_$(date +%s%N)_$RANDOM"
        trap "rm -f $tmpfile; exit" INT TERM

        case "$ext" in
            py)
                $QUIET || echo "[PY  ] Running: $filename ($PYTHON_INTERP)"
                if grep -q '^#!.*python' "$file"; then
                    "$file"
                else
                    "$PYTHON_INTERP" "$file"
                fi
                ;;
            js)
                $QUIET || echo "[JS  ] Running: $filename ($NODE_INTERP)"
                if grep -q '^#!.*node' "$file"; then
                    "$file"
                else
                    "$NODE_INTERP" "$file"
                fi
                ;;
            c)
                $QUIET || echo "[C   ] Compiling & Running: $filename ($C_COMPILER)"
                "$C_COMPILER" "$file" -o "$tmpfile" && "$tmpfile"
                ;;
            cpp|cc|cxx|c++)
                $QUIET || echo "[C++ ] Compiling & Running: $filename ($CXX_COMPILER)"
                "$CXX_COMPILER" "$file" -o "$tmpfile" && "$tmpfile"
                ;;
            rs)
                $QUIET || echo "[RS  ] Compiling & Running: $filename ($RUSTC)"
                "$RUSTC" "$file" -o "$tmpfile" && "$tmpfile"
                ;;
            go)
                $QUIET || echo "[GO  ] Compiling & Running: $filename ($GO)"
                "$GO" build -o "$tmpfile" "$file" && "$tmpfile"
                ;;
            java)
                class_name=$(basename "$file" .java)
                $QUIET || echo "[JAVA] Compiling & Running: $filename ($JAVAC)"
                "$JAVAC" "$file" -d /tmp && "$JAVA" -cp /tmp "$class_name"
                rm -f "/tmp/$class_name.class"
                ;;
            *)
                $QUIET || echo -e "${YELLOW}[SKIP] Unsupported extension for run: $filename${NC}"
                ;;
        esac

        rm -f "$tmpfile"
        continue
    fi

    # ========== BUILD ==========
    case "$ext" in
        c)
            $QUIET || echo "[C   ] Compiling: $filename -> $BIN_DIR/$output_name ($C_COMPILER)"
            output=$("$C_COMPILER" "$file" -o "$BIN_DIR/$output_name" 2>&1)
            status=$?
            ;;
        cpp|cc|cxx|c++)
            $QUIET || echo "[C++ ] Compiling: $filename -> $BIN_DIR/$output_name ($CXX_COMPILER)"
            output=$("$CXX_COMPILER" "$file" -o "$BIN_DIR/$output_name" 2>&1)
            status=$?
            ;;
        py)
            shebang=$(head -n 1 "$file")
            if [[ "$shebang" =~ ^#! ]]; then
                cp "$file" "$BIN_DIR/$output_name"
                shebang_info="(has shebang: $shebang)"
            else
                echo '#!/usr/bin/env python3' > "$BIN_DIR/$output_name"
                cat "$file" >> "$BIN_DIR/$output_name"
                shebang_info="(added shebang: #!/usr/bin/env python3)"
            fi
            chmod +x "$BIN_DIR/$output_name"
            $QUIET || echo "[PY  ] $filename -> $BIN_DIR/$output_name $shebang_info ($PYTHON_INTERP)"
            echo "[PY] $filename -> $BIN_DIR/$output_name $shebang_info ($PYTHON_INTERP)" >> "$LOG_FILE"
            compiled=$((compiled + 1))
            continue
            ;;
        js)
            shebang=$(head -n 1 "$file")
            if [[ "$shebang" =~ ^#! ]]; then
                cp "$file" "$BIN_DIR/$output_name"
                shebang_info="(has shebang: $shebang)"
            else
                echo '#!/usr/bin/env node' > "$BIN_DIR/$output_name"
                cat "$file" >> "$BIN_DIR/$output_name"
                shebang_info="(added shebang: #!/usr/bin/env node)"
            fi
            chmod +x "$BIN_DIR/$output_name"
            $QUIET || echo "[JS  ] $filename -> $BIN_DIR/$output_name $shebang_info ($NODE_INTERP)"
            echo "[JS] $filename -> $BIN_DIR/$output_name $shebang_info ($NODE_INTERP)" >> "$LOG_FILE"
            compiled=$((compiled + 1))
            continue
            ;;
        rs)
            $QUIET || echo "[RS  ] Compiling: $filename -> $BIN_DIR/$output_name ($RUSTC)"
            output=$("$RUSTC" "$file" -o "$BIN_DIR/$output_name" 2>&1)
            status=$?
            ;;
        go)
            $QUIET || echo "[GO  ] Compiling: $filename -> $BIN_DIR/$output_name ($GO)"
            output=$("$GO" build -o "$BIN_DIR/$output_name" "$file" 2>&1)
            status=$?
            ;;
        java)
            $QUIET || echo "[JAVA] Compiling: $filename -> $BIN_DIR/ ($JAVAC)"
            output=$("$JAVAC" "$file" -d "$BIN_DIR" 2>&1)
            status=$?
            output_name="$name.class"
            ;;
        *)
            $QUIET || echo -e "${YELLOW}[SKIP] Unsupported extension: $filename${NC}"
            echo "[SKIP] Unsupported: $filename" >> "$LOG_FILE"
            unsupported=$((unsupported + 1))
            unsupported_files+=("$filename")
            continue
            ;;
    esac

    # ========== Avaliação ==========
    if [[ $status -eq 0 ]]; then
        if echo "$output" | grep -qi "warning"; then
            $QUIET || echo -e "${YELLOW}[WARN] $BIN_DIR/$output_name compiled with warnings${NC}"
            echo "[WARN] $BIN_DIR/$output_name" >> "$LOG_FILE"
            $INFO && echo "$output"
            warnings=$((warnings + 1))
            warning_files+=("$filename")
        else
            $QUIET || echo -e "${GREEN}[ OK ] $BIN_DIR/$output_name${NC}"
            echo "[OK] $BIN_DIR/$output_name" >> "$LOG_FILE"
        fi
        compiled=$((compiled + 1))
    else
        $QUIET || echo -e "${RED}[FAIL] Compilation failed: $filename${NC}"
        echo "[FAIL] $filename" >> "$LOG_FILE"
        $INFO && echo "$output"
        errors=$((errors + 1))
        error_files+=("$filename")
    fi

done

# ========== Relatório ==========
if [[ "$RUN" == false ]]; then
    echo
    echo -e "${BLUE}================= Build Report ===================${NC}"
    echo "Compiled successfully : $compiled"
    echo "Warnings              : $warnings"
    echo -e "Errors                : ${RED}$errors${NC}"
    echo "Unsupported files     : $unsupported"
    echo "Not found files       : $notfound"

    if [[ $warnings -gt 0 ]]; then
        echo "-> Warnings in:"
        for w in "${warning_files[@]}"; do
            echo "   - $w"
        done
    fi
    if [[ $errors -gt 0 ]]; then
        echo "-> Errors in:"
        for e in "${error_files[@]}"; do
            echo "   - $e"
        done
    fi
    if [[ $unsupported -gt 0 ]]; then
        echo "-> Unsupported files:"
        for u in "${unsupported_files[@]}"; do
            echo "   - $u"
        done
    fi
    if [[ $notfound -gt 0 ]]; then
        echo "-> Not found files:"
        for n in "${notfound_files[@]}"; do
            echo "   - $n"
        done
    fi
    echo -e "${BLUE}==================================================${NC}"
    echo "========== Build Finished ==========" >> "$LOG_FILE"
fi
        		



